<section class="bg-slate-800 text-white py-20">
    <div class="w-1/2 m-auto">
        <!-- <h1 class="text-white text-5xl mb-8">Skills.</h1> -->
        <div id="section2" class="w-fit mr-auto mb-8">
            <div id="typing2" class="typing-container overflow-hidden whitespace-nowrap"><h1 class="text-5xl m-0 leading-10">Skills</h1></div>
        </div>

        <div class="flex justify-between">
            <div class="flex-1 mx-2">
                <p>Frontend</p>
                <hr class="mb-2">
                <div class="flex items-center">
                    <i class="devicon-react-original text-3xl"/>
                    <p class="text-white ml-2">React</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-tailwindcss-plain text-3xl"/>
                    <p class="text-white ml-2">Tailwind</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-androidstudio-plain text-3xl"/>
                    <p class="text-white ml-2">Android Studio</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-figma-plain text-3xl"/>
                    <p class="text-white ml-2">Figma</p>
                </div>

            </div>
            <div class="flex-1 mx-2">
                <p>Backend</p>
                <hr class="mb-2">

                <div class="flex items-center">
                    <i class="devicon-express-original text-3xl"/>
                    <p class="text-white ml-2">Express</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-mongodb-plain text-3xl"/>
                    <p class="text-white ml-2">MongoDB</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-nodejs-plain text-3xl"/>
                    <p class="text-white ml-2">NodeJS</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-sqlite-plain text-3xl"/>
                    <p class="text-white ml-2">SQLite</p>
                </div>
            </div>
            <div class="flex-1 mx-2">
                <p>Languages</p>
                <hr class="mb-2">
                <div class="flex items-center">
                    <i class="devicon-java-plain text-3xl"/>
                    <p class="text-white ml-2">Java</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-javascript-plain text-3xl"/>
                    <p class="text-white ml-2">JavaScript</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-c-plain text-3xl"/>
                    <p class="text-white ml-2">C</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-html5-plain text-3xl"/>
                    <p class="text-white ml-2">HTML</p>
                </div>
                <div class="flex items-center">
                    <i class="devicon-css3-plain text-3xl"/>
                    <p class="text-white ml-2">CSS</p>
                </div>
            </div>
        </div>
        <p class="mt-8">Concepts: git, agile, SOLID principles, RESTful APIs, testing, software metrics, version control, concurrency</p>
    </div>
</section>

<style>
    .typing-container {
      border-right: 0.2em solid #fff;
    }
  
    .animation {
      animation: typing-animation 0.9s steps(8) forwards;
    }
  
    @keyframes typing-animation {
      from {
        width: 0;
      }
      to {
        width: 100%;
        border-color: transparent;
      }
    }
  </style>
  
  <script>
    // Function to handle the intersection observer callback
    function handleIntersection(entries, observer) {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Add the changed class when the element is in view
            targetElement.classList.add('animation');
          } else {
            // Remove the changed class when the element is out of view
            targetElement.classList.remove('animation');
          }
        });
      }
  
      // Target element
      const targetElement = document.getElementById('typing2');
  
      // Options for the Intersection Observer
      const options = {
        root: null, // use the viewport as the root
        rootMargin: '0px', // no margin
        threshold: 0.5, // trigger when 50% of the element is visible
      };
  
      // Create an Intersection Observer
      const observer = new IntersectionObserver(handleIntersection, options);
  
      // Start observing the target element
      observer.observe(targetElement);
  </script>